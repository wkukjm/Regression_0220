# -*- coding: utf-8 -*-
"""Logistic_diabet.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BiC0i-dcsSur8wZrTnThH070SbS6F8ZY
"""

import tensorflow
import matplotlib.pyplot as plt
import numpy as np
from tensorflow.keras import Sequential,Input
from tensorflow.keras.layers import Dense
import pandas as pd

df = pd.read_csv("diabetes.csv")

print(type(df))
print(df.describe())
#Pregnancies(임신횟수), Glucose(혈장),BloodPressure(혈압),SkinThickness(피부두께),
# Insulin(인슐린), BMI(체질량), DiabetesPedigreeFunction(당뇨유전), Age(나이)
# Outcome(정답파일)(1: 당뇨병 tested 양성, 0: 당뇨병 음성 판정)

#히스토그램 분석
plt.hist(df.iloc[:,0])
plt.title("Pregnancies")
plt.show()#결과 이상데이터 없음

#히스토그램 분석
plt.hist(df.iloc[:,1])
plt.title("Glucose")
plt.show()#결과 이상데이터 없음

#히스토그램 분석
plt.hist(df.iloc[:,2])
plt.title("BloodPressure")
plt.show()#결과 이상데이터 없음

#히스토그램 분석
plt.hist(df.iloc[:,3])
plt.title("SkinThickness")
plt.show()#결과 이상데이터 없음

#히스토그램 분석
plt.hist(df.iloc[:,4])
plt.title("Insulin")
plt.show()#결과 이상데이터 없음

#히스토그램 분석
plt.hist(df.iloc[:,5])
plt.title("BMI")
plt.show()#결과 이상데이터 없음

#히스토그램 분석
plt.hist(df.iloc[:,6])
plt.title("DiabetesPedigreeFunction")
plt.show()#결과 이상데이터 없음

#히스토그램 분석
plt.hist(df.iloc[:,7])
plt.title("age")
plt.show()#결과 이상데이터 없음

#훈련데이터 정답데이터 분리
x_data = df.iloc[:,:-1]
y_data = df.iloc[:,-1]
print(x_data.shape)
print(y_data.shape)
print(type(x_data))
print(x_data.iloc[0,-1])
print(y_data.iloc[0])

#데이터 분리(훈련데이터 80%, 테스트데이터 10%, 검증데이터 10%)
from sklearn.model_selection import train_test_split
x_train,x_t_v,y_train,y_t_v = \
 train_test_split(x_data,y_data,test_size=0.2,random_state=111,stratify=y_data)
print(x_train.shape)
print(y_train.shape)
print(x_t_v.shape)
print(y_t_v.shape)

#테스데이터와 검증 데이터 분리
x_test,x_valid,y_test,y_valid =\
 train_test_split(x_t_v,y_t_v,test_size=0.5,random_state=111,stratify=y_t_v)
print(x_test.shape)
print(y_test.shape)
print(x_valid.shape)
print(y_valid.shape)

#데이터 전처리(정규분포 전처리)
import sklearn
scaler = sklearn.preprocessing.StandardScaler()
x_train = scaler.fit_transform(x_train)
x_test = scaler.transform(x_test)
x_valid = scaler.transform(x_valid)
print(x_train[0])
print(x_test[0])
print(x_valid[0])

# 데이터 정규분포 변환

print(x_train.shape)
model = Sequential()
model.add(Input((8,)))
model.add(Dense(1,activation="sigmoid"))
model.compile(loss="binary_crossentropy",optimizer="adam",metrics=["acc"])

fit_hist = model.fit(x_train,y_train,validation_data=(x_valid,y_valid),epochs=70)

his = fit_hist.history
print(his.keys())
#정확률 그래프
plt.subplot(1,2,1)
plt.plot(his["acc"],label="train")
plt.plot(his["val_acc"],label="valid")
plt.legend()
plt.title("ACCURACY")
#손실도 그래프
plt.subplot(1,2,2)
plt.plot(his["val_loss"],label="valid")
plt.plot(his["loss"],label="train")
plt.legend()
plt.title("LOSSES")
plt.show()

result = model.evaluate(x_test,y_test)
print(f"손실도 {result[0]:.2f} 정확율 {result[1]*100:.2f}%")

#예측값으로 정확도 측정
y_pred = model.predict(x_test)
y_test = np.array(y_test)
print(y_pred.shape)
print(y_test.shape)
y_test = y_test.reshape((len(y_test),-1))
print(y_test.shape)

print(y_pred[0])
print(y_test[0])
y_pred = y_pred>0.5
y_pred = y_pred.astype(np.int8)
print(y_pred[0])

right=0
wrong=0
for i in range(len(y_pred)):
  if y_pred[i]==y_test[i]:right+=1
  else : wrong+=1
rat = ((right/len(y_pred)))*100
print(f"정확률 {rat:.2f}%")

#혼동행렬 confusion matrix
cm = sklearn.metrics.confusion_matrix(y_test,y_pred)
print(cm)

# 히트맵(혼동행렬 그래프)
import seaborn as sns
ax = sns.heatmap(cm, annot=True)
ax.set(xlabel="predict", ylabel="actual")
plt.show()

#f1_score, recall, precision
score = sklearn.metrics.classification_report(y_test,y_pred)
print(score)

